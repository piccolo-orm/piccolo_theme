<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="func_8h" kind="file" language="C++">
    <compoundname>func.hpp</compoundname>
    <innerclass refid="class_cpp_class" prot="public">CppClass</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="func_8h_1a0b10437b2a2e3cfaf9eec911b525aad1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cpp_function</definition>
        <argsstring>(int *a, int *b, int *c)</argsstring>
        <name>cpp_function</name>
        <param>
          <type>int *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Doing important things with parameter directions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">a</parametername>
</parameternamelist>
<parameterdescription>
<para>output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>input </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">c</parametername>
</parameternamelist>
<parameterdescription>
<para>input but gets rewritten </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="func.hpp" line="29" column="6" declfile="func.hpp" declline="29" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="class_cpp_class" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_cpp_class" kindref="compound">CppClass</ref></highlight></codeline>
<codeline lineno="2"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="class_cpp_class_1a5ffd5399e21eb5b0f94fafe4c55d3124" kindref="member">member_function</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(std::out_of_range);</highlight></codeline>
<codeline lineno="5"><highlight class="normal">};</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="class_cpp_class_1a5ffd5399e21eb5b0f94fafe4c55d3124" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="class_cpp_class_1a5ffd5399e21eb5b0f94fafe4c55d3124" kindref="member">CppClass::member_function</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">(std::out_of_range)<sp/>{}</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cpp_function(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>c);</highlight></codeline>
    </programlisting>
    <location file="func.hpp"/>
  </compounddef>
</doxygen>
